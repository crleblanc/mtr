syntax = "proto3";

package mtrpb;
option go_package = "mtrpb";

// DataLatencySummary is a summary of data latency metrics for each site.
// mean should not be 0.  fifty and ninety may be unknown (0).
// If upper == lower == 0 then no threshold has been set on the metric.
message DataLatencySummary {
    // The siteID for the metric e.g., TAUP
    string site_iD = 1;
    // The typeID for the metric e.g., latency.strong
    string type_iD  = 2;
    // Unix time in seconds for the metric value (don't need nanos).
    int64 seconds = 3;
    // The mean latency
    int32 mean = 4;
    // The fiftieth percentile value.  Might be unknown (0)
    int32 fifty = 5;
    // The ninetieth percentile value.  Might be unknown (0)
    int32 ninety = 6;
    // The upper threshold for the metric to be good.
    int32 upper = 7;
    // The lower threshold for the metric to be good.
    int32 lower = 8;
    // the scale factor to apply to the threshold values
    double scale = 9;
}

message DataLatencySummaryResult {
    repeated DataLatencySummary result = 1;
}

message DataSite {
    // The siteID for the metric e.g., TAUP
    string site_iD = 1;
    // The site latitude - not usually accurate enough for meta data
    double latitude = 2;
    // The site longitude - not usually accurate enough for meta data
    double longitude = 3;
}

message DataSiteResult {
    repeated DataSite result = 1;
}

message DataLatencyTag {
    // The siteID for the latency e.g., TAUP
    string site_iD = 1;
    // The typeID for the latency e.g., latency.gnss.1hz
    string type_iD  = 2;
    // The tag for the latency e.g., TAUP
    string tag = 3;
}

message DataLatencyTagResult {
    repeated DataLatencyTag result = 1;
}

message DataLatencyThreshold {
    // The siteID for the latency e.g., TAUP
    string site_iD = 1;
    // The typeID for the latency e.g., latency.gnss.1hz
    string type_iD  = 2;
    // The lower threshold for the latency to be good.
    int32 lower = 3;
    // The upper threshold for the latency to be good.
    int32 upper = 4;
    // the scale factor to apply to the threshold values
    double scale = 5;

}

message DataLatencyThresholdResult {
    repeated DataLatencyThreshold result = 1;
}

message DataType {
    // The TypeID in the table data.type
    string type_iD = 1;
    // The display field in the table data.type (the y label for plotting)
    string display = 2;
}

message DataTypeResult {
    repeated DataType result = 1;
}


// DataLatency represents a series of metric for a site+type.
message DataLatency {
    // Unix time in seconds for the metric value (don't need nanos).
    int64 seconds = 1;
    // The mean latency
    float mean = 2;
    // The fiftieth percentile value.  Might be unknown (0)
    int32 fifty = 3;
    // The ninetieth percentile value.  Might be unknown (0)
    int32 ninety = 4;
}

message DataLatencyResult {
    // The siteID for the metric e.g., TAUP
    string site_iD = 1;
    // The typeID for the metric e.g., latency.strong
    string type_iD  = 2;
    // The upper threshold for the metric to be good.
    int32 upper = 3;
    // The lower threshold for the metric to be good.
    int32 lower = 4;

    repeated DataLatency result = 5;
    // the scale factor to apply to the threshold values
    double scale = 6;
}

// DataCompletenessSummary is metrics to let us determine if all the data had arrived.
// The "completenss" value is derived from:
//    {count in a period of time (no less than 5 minutes)} / { expected count im a period of time }
// For example, a site(type) expects 300 counts in 5 minutes (1hz),
//    but got 270 counts for the latest 5 minutes then its latest completeness will be 0.9 .
message DataCompletenessSummary {
    // The siteID for the completeness e.g., TAUP
    string site_iD = 1;
    // The typeID for the completeness e.g., gnss.1hz
    string type_iD  = 2;
    // Unix time in seconds for the metric value (don't need nanos).
    int64 seconds = 3;
    // The completeness for a given period of time
    float completeness = 4;
}

message DataCompletenessSummaryResult {
    repeated DataCompletenessSummary result = 1;
}

message DataCompletenessTag {
    // The siteID for the latency e.g., TAUP
    string site_iD = 1;
    // The typeID for the latency e.g., gnss.1hz
    string type_iD  = 2;
    // The tag for the latency e.g., TAUP
    string tag = 3;
}

message DataCompletenessTagResult {
    repeated DataCompletenessTag result = 1;
}