syntax = "proto3";

package mtrpb;
option go_package = "mtrpb";

// FieldMetricSummary is the latest value received for a field metric and thresholds for the metric.
// If upper == lower == 0 then no threshold has been set on the metric.
message FieldMetricSummary {
    // The deviceID for the metric e.g., idu-birchfarm
    string device_iD = 1;
    // The typeID for the metric e.g., conn
    string type_iD  = 2;
    // Unix time in seconds for the metric value (don't need nanos).
    int64 seconds = 3;
    // The value
    int32 value = 4;
    // The upper threshold for the metric to be good.
    int32 upper = 5;
    // The lower threshold for the metric to be good.
    int32 lower = 6;
    // the modelID for the device e.g., "Trimble NetR9"
    string model_iD = 7;
    // the scale factor to apply to the threshold values
    double scale = 8;
}

message FieldMetricSummaryResult {
    repeated FieldMetricSummary result = 1;
}

message FieldMetricTag {
    // The deviceID for the metric e.g., idu-birchfarm
    string device_iD = 1;
    // The typeID for the metric e.g., conn
    string type_iD  = 2;
    // The tag for the metric e.g., TAUP
    string tag = 3;
}

message FieldMetricTagResult {
    repeated FieldMetricTag result = 1;
}

message FieldMetricThreshold {
    // The deviceID for the metric e.g., idu-birchfarm
    string device_iD = 1;
    // The typeID for the metric e.g., conn
    string type_iD  = 2;
    // The lower threshold for the metric to be good.
    int32 lower = 3;
    // The upper threshold for the metric to be good.
    int32 upper = 4;
    // The scale to multiply the thresholds by
    double scale = 5;

}

message FieldMetricThresholdResult {
    repeated FieldMetricThreshold result = 1;
}

message FieldModel {
    // the modelID for the field threshold
    string model_iD = 1;
}

message FieldModelResult {
    repeated FieldModel result = 1;
}

message FieldDevice {
    // The deviceID for the metric e.g., idu-birchfarm
    string device_iD = 1;
    // The modelID for the metric e.g., Trimble NetR9
    string model_iD = 2;
    // Decimal Latitude and Longitude, only uses three digits of precision after decimal
    float latitude = 3;
    float longitude = 4;
}

message FieldDeviceResult {
    repeated FieldDevice result = 1;
}

message FieldType {
    // The TypeID in the table field.type
    string type_iD = 1;
    // display in the table field.type, the units to display when plotting
    string display = 2;
}

message FieldTypeResult {
    repeated FieldType result = 1;
}

message FieldState {
    // the deviceID in field.device
    string device_iD = 1;
    // the typeID in field.type
    string type_iD = 2;
    // Unix time in seconds for the state in field.state (don't need nanos).
    int64 seconds = 3;
    // the on/off value state in field.state
    bool value = 4;
}

message FieldStateResult {
    repeated FieldState result = 1;
}

message FieldStateTag {
    // The deviceID for the metric e.g., idu-birchfarm
    string device_iD = 1;
    // The typeID for the metric e.g., conn
    string type_iD  = 2;
    // The tag for the metric e.g., TAUP
    string tag = 3;
}

message FieldStateTagResult {
    repeated FieldStateTag result = 1;
}

message FieldMetric {
    // Unix time in seconds for the metric value (don't need nanos).
    int64 seconds = 1;
    // The value
    float value = 2;
}

message FieldMetricResult {
    // The deviceID for the metric e.g., idu-birchfarm
    string device_iD = 1;
    // The typeID for the metric e.g., conn
    string type_iD  = 2;
    // Unix time in seconds for the metric value (don't need nanos).
    int64 seconds = 3;
    // The value
    int32 value = 4;
    // The upper threshold for the metric to be good.
    int32 upper = 5;
    // The lower threshold for the metric to be good.
    int32 lower = 6;

    repeated FieldMetric result = 7;

    // the scale factor to multiply the threshold values by
    double scale = 8;
}